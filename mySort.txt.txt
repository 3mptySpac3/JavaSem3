Bucket Sort is a sorting algorithm tht wokrs by dividing the input data into smaller groups or "buckets". It sorts the smaller groups individually then combines the groups together into one sorted array 

1. Determines the Number of Groups 

final int numberOfBuckets = (int) Math.sqrt(shapes.length);

The number of groups or buckets are determined by taking the square root of the number of shapes to balance the distribution of data. The result is stored in the varible 'numberOfBuckets'.

2. Initialize Buckets

List<List<Shape>> buckets = new ArrayList<>(numberOfBuckets);
for (int i = 0; i < numberOfBuckets; i++) {
    buckets.add(new ArrayList<>());
}


An arraylist of lists of the buckets is created to store the shapes. The "numberOfBuckets" variable is then used to prepare for the distribution of the shapes. The total number of operations within the loop would be "2N + 2" where N is the value of "numberOfBuckets".

3. Find the Largest Volume  

double maxVolume = Double.MIN_VALUE;
for (Shape shape : shapes) {
    if (shape.getVolume() > maxVolume) {
        maxVolume = shape.getVolume();
    }
}

The code iterates through the array of shapes to find the shape with the largest value. The variable 'MaxVolume' is used here when the shape with the largest volume is found. 

4. Distribute Shapes into Buckets 

double maxVolume = Double.MIN_VALUE;
for (Shape shape : shapes) {
    if (shape.getVolume() > maxVolume) {
        maxVolume = shape.getVolume();
    }
}

Each shape is assigned to its respective bucket. The "bucketIndex" variable is calculated based on the shape's volume, the number of buckets, and the maximum volume. Then the shapes are distributed to its appropriate buckets. 

5. Buckets are sorted individually 

int index = 0;
for (List<Shape> bucket : buckets) {
    Collections.sort(bucket, (s1, s2) -> Double.compare(s1.getVolume(), s2.getVolume()));
    for (Shape shape : bucket) {
        shapes[index++] = shape;
    }
}

First, the buckets are sorted individually, It uses the collections.sort and the compare method from the shapes class to sort the shapes within each bucket by their volumes. After sorting the sorted shapes are gathered back into the original shapes array. 

6. Return the Sorted array: 

return shapes;

The shapes array is returned with all its values sorted. 
